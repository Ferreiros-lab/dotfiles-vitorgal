""""" required options for neobundle
if has('vim_starting')
	set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
call neobundle#rc(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" my bundles
" themes
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'morhetz/gruvbox'
" toggle comments by typing 'gc'
NeoBundle 'tpope/vim-commentary'
" surround text with pairs like (), for example by visually selecting and doing S}
NeoBundle 'tpope/vim-surround'
" some handy mappings (useful for text bubbling — see custom mappings down)
NeoBundle 'tpope/vim-unimpaired'
" git wrapper
NeoBundle 'tpope/vim-fugitive'
" markdown syntax
NeoBundle 'tpope/vim-markdown'
" jade syntax
NeoBundle 'digitaltoad/vim-jade'
" scss syntax
NeoBundle 'cakebaker/scss-syntax.vim'
" less syntax
NeoBundle 'groenewege/vim-less'
" html5 and inline svg omnicomplete funtion, indent and syntax
NeoBundle 'othree/html5.vim'
" css3 syntax
NeoBundle 'hail2u/vim-css3-syntax'
" csscomb
NeoBundle 'csscomb/CSScomb-for-Vim'
" processing bundle
NeoBundle 'sophacles/vim-processing'
" textmate-style snippets
NeoBundle 'Shougo/neosnippet.vim'
" collection of snippets
NeoBundle 'honza/vim-snippets'
" visually select text and press '*' and '#' to search for it
NeoBundle 'nelstrom/vim-visual-star-search'
" auto-close pairs like () and []
NeoBundle 'vim-scripts/AutoClose'
" multiple cursors
NeoBundle 'terryma/vim-multiple-cursors'
" file explorer (use <space> to mark files, and 'a' to act on them)
NeoBundle 'Shougo/vimfiler.vim'
" automatically open popup menu for completions
NeoBundle 'Shougo/neocomplete.vim'
" more intuitive interface for the undo tree, call with :GundoToggle
NeoBundle 'sjl/gundo.vim'
" syntax checker
NeoBundle 'scrooloose/syntastic'
" extend motions (eg <leader><leader>w)
NeoBundle 'Lokaltog/vim-easymotion'
" interactive command execution in vim
NeoBundle 'Shougo/vimproc', { 'build' : { 'mac' : 'make -f make_mac.mak', }, }
" shell implemented by vim (requires vimproc)
NeoBundle 'Shougo/vimshell.vim'
" unite and create user interfaces
NeoBundle 'Shougo/unite.vim'

"""""
""""" general options
set backspace=indent,eol,start " fixes backspace behaviour
filetype plugin indent on " respects commands and indents from plugins and filetypes
set nocompatible " stops from behaving in a vi compatible way
syntax enable " color code syntax
colorscheme solarized " colorscheme
" colorscheme for GUI
if has ('gui_running')
	colorscheme gruvbox
endif
set guioptions-=T " remove toolbar on GUI
set guioptions-=r " remove right-hand scroll bar on GUI
set guifont=Source\ Code\ Pro:h11 " font on GUI (macvim)
set background=dark " background
set cursorline " highlights the line the cursor is in
"set number " line numbers
set relativenumber " line numbers relative to the current line
set ruler " show the line number on the bar
set showcmd " show exta information on the bar, like the number of selected lines
set wildmenu " show completions in command mode
set wildmode=list:longest,full " in command mode, press tab once to show alternatives, and again to cycle
set autoread " watch for file changes
set autoindent " auto-indent code
set scrolloff=5 " allows show at least 3 extra lines before/after the cursor
set tabstop=4 " how many columns (spaces) a tab counts for
set softtabstop=4 " how many columns (spaces) a tab will convert to
set shiftwidth=4 " how many columns (spaces) text is reindented
"set expandtab " convert tabs to spaces
set incsearch " highlights search matches as they are typed
set nofoldenable " disables code folding
set listchars=tab:▸\ ,eol:¬ " use the same symbols as TextMate for tabstops and EOLs
" source the vimrc file after saving it
if has("autocmd")
	autocmd bufwritepost .vimrc source $MYVIMRC
endif

"""""
""""" mappings
" map split window navigation to <leader> + arrow_direction
nnoremap <leader><up> <C-w><up>
nnoremap <leader><right> <C-w><right>
nnoremap <leader><down> <C-w><down>
nnoremap <leader><left> <C-w><left>
" map split window resizing options
nnoremap <leader>+ <C-w>+
nnoremap <leader>- <C-w>-
nnoremap <leader>< <C-w><
nnoremap <leader>> <C-w>>
nnoremap <leader>= <C-w>=
" map exchange window with its neighbour
nnoremap <leader>x <C-w>x
" map changing split windows from vertical to horizontal and the reverse
nnoremap <leader>- <C-w>t <C-w>H
nnoremap <leader>_ <C-w>t <C-w>K
" navigate between tabs with Cmd+Opt+[left, right]
nnoremap <D-A-right> :tabnext<CR>
nnoremap <D-A-left> :tabprevious<CR>
" cycle tab position with Opt+[left, right]
nnoremap <silent><A-left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent><A-right> :execute 'silent! tabmove ' . tabpagenr()<CR>
" go back and forth on the jumplist
nnoremap g<left> <C-o>
nnoremap g<right> <C-i>
" show and hide invisibles (tabs, EOL)
nnoremap <leader>i :set list!<cr>
" toggle spell checking on and off with '<leader>s' and set region to en_gb
nnoremap <silent> <leader>s :set spell!<cr>:set spelllang=en_gb<cr>
" toggle search highlight with <leader>h
nnoremap <leader>h :set hlsearch!<cr>
" type 'NO' to type normal mode commands in command mode
nnoremap NO :normal 
" make ' behave like ` to prevent weird keyboard issues
nnoremap ' `
" delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d
" press <leader>p to paste from the clipboard, ignoring auto-indent
nnoremap <leader>p :set paste<cr>"+p:set nopaste<cr>
" with the cursor over a class name, press <leader>c to go to the class on the css/sass
nnoremap <leader>c :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cnext<cr>
" then press <leader>n to step through the quick-fix list results
nnoremap <leader>n :cn<cr>
" change the working directory of the current window to the one of the current file
nnoremap <leader>l :lcd %:p:h<cr>

"""""
""""" set plugin-specific options
" sophacles/vim-processing
let g:use_processing_java=1 " uses processing_java to run skectches
" map Cmd + 0 to run skectches
nnoremap <D-0> :w<cr>:RunProcessing<cr>

" tpope/vim-unimpaired
" bubble single lines
nnoremap <C-Up> [e
nnoremap <C-Down> ]e
" bubble multiple lines
vnoremap <C-Up> [egv
vnoremap <C-Down> ]egv

" tpope/vim-fugitive
" use gc to quicly prepare the file for commiting
nnoremap gc :Gwrite<cr>:Gcommit -m '

" Shougo/neosnippet.vim
" enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1
" tell neosnippet about the vim-snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
" SuperTab-like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" Shougo/vimfiler.vim
" make it the default file explorer
let g:vimfiler_as_default_explorer=1
" edit in new tabs by default
let g:vimfiler_edit_action='tabopen'

" Shougo/neocomplete
" enable at startup
let g:neocomplete#enable_at_startup=1
" set minimum syntax keyword length
let g:neocomplete#sources#syntax#min_keyword_length=3
" make <cr> do a carriage return normally
inoremap <silent><CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
	return neocomplete#smart_close_popup() . "\<CR>"
endfunction
" use <up> and <down> to select completions
inoremap <expr><down> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><up> pumvisible() ? "\<C-p>" : "\<TAB>"

" Shougo/unite.vim
" run a fuzzy file finder
nnoremap <C-p> :Unite file<cr>

" " Change some settings that may trip Codekit
autocmd FileType jade,scss,sass set nobackup | set nowritebackup | set noswapfile
