""""" required options for neobundle
if has('vim_starting')
	set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
call neobundle#rc(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" my bundles
" themes
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'morhetz/gruvbox'
" markdown syntax
NeoBundleLazy 'tpope/vim-markdown'
" jade syntax
NeoBundleLazy 'digitaltoad/vim-jade'
" scss syntax
NeoBundleLazy 'cakebaker/scss-syntax.vim'
" less syntax
NeoBundleLazy 'groenewege/vim-less'
" html5 and inline svg omnicomplete funtion, indent and syntax
NeoBundleLazy 'othree/html5.vim'
" close html tags by typing '</'
NeoBundleLazy 'vim-scripts/closetag.vim'
" emmet
NeoBundleLazy 'mattn/emmet-vim'
" css3 syntax
NeoBundleLazy 'hail2u/vim-css3-syntax'
" csscomb
NeoBundleLazy 'csscomb/csscomb-for-vim'
" processing bundle
NeoBundle 'sophacles/vim-processing'
" toggle comments by typing 'gc'
NeoBundle 'tpope/vim-commentary'
" surround text with pairs like (), for example by visually selecting and doing S}
NeoBundle 'tpope/vim-surround'
" git wrapper
NeoBundle 'tpope/vim-fugitive'
" move visual selections
NeoBundle 'marcelbeumer/dragvisuals.vim'
" textmate-style snippets
NeoBundle 'Shougo/neosnippet.vim'
" collection of snippets
NeoBundle 'honza/vim-snippets'
" visually select text and press '*' and '#' to search for it
"NeoBundle 'nelstrom/vim-visual-star-search'
" auto-close pairs like () and []
NeoBundle 'Raimondi/delimitMate'
" multiple cursors
"NeoBundle 'terryma/vim-multiple-cursors'
" file explorer (use <space> to mark files, and 'a' to act on them)
"NeoBundle 'Shougo/vimfiler.vim'
" automatically open popup menu for completions
NeoBundle 'Shougo/neocomplete.vim'
" more intuitive interface for the undo tree, call with :GundoToggle
"NeoBundle 'sjl/gundo.vim'
" syntax checker
"NeoBundle 'scrooloose/syntastic'
" extend motions (eg <leader><leader>w)
NeoBundle 'Lokaltog/vim-easymotion'
" interactive command execution in vim
"NeoBundle 'Shougo/vimproc', { 'build' : { 'mac' : 'make -f make_mac.mak', }, }
" shell implemented by vim (requires vimproc)
"NeoBundle 'Shougo/vimshell.vim'
" better handling of annoyances around swapfiles
NeoBundle 'vitorgalvao/autoswap_mac'
" fuzzy file, buffer, mru, tag, etc finder
NeoBundle 'kien/ctrlp.vim'
" command palette similar to the one in Sublime Text (requires ctrlp)
NeoBundle 'fisadev/vim-ctrlp-cmdpalette'
" bundles to load only on specific file types
autocmd FileType markdown,mdown,mkdn,mkd,md NeoBundleSource vim-markdown
autocmd FileType jade NeoBundleSource vim-jade
autocmd FileType scss NeoBundleSource scss-syntax
autocmd FileType less NeoBundleSource less
autocmd FileType html NeoBundleSource html5 closetag emmet-vim
autocmd FileType css NeoBundleSource vim-css3-syntax csscomb-for-vim emmet-vim
autocmd FileType pde NeoBundleSource vim-processing

"""""
""""" general options
set backspace=indent,eol,start " fixes backspace behaviour
filetype plugin indent on " respects commands and indents from plugins and filetypes
set nocompatible " stops from behaving in a vi compatible way
syntax enable " color code syntax
colorscheme solarized " colorscheme
" colorscheme for GUI
if has ('gui_running')
	colorscheme gruvbox
endif
set guioptions-=T " remove toolbar on GUI
set guioptions-=r " remove right-hand scroll bar on GUI
set guifont=Source\ Code\ Pro:h12 " font on GUI (macvim)
set background=dark " background
set cursorline " highlights the line the cursor is in
set relativenumber " line numbers relative to the current line
set ruler " show the line number on the bar
set list " show invisibles by default
set showcmd " show exta information on the bar, like the number of selected lines
set wildmenu " show completions in command mode
set wildmode=list:longest,full " in command mode, press tab once to show alternatives, and again to cycle
set autoread " watch for file changes
set autoindent " auto-indent code
set scrolloff=5 " allows show at least 3 extra lines before/after the cursor
set tabstop=4 " how many columns (spaces) a tab counts for
set softtabstop=4 " how many columns (spaces) a tab will convert to
set shiftwidth=4 " how many columns (spaces) text is reindented
"set expandtab " convert tabs to spaces
set incsearch " highlights search matches as they are typed
"set nofoldenable " disables code folding
set listchars=tab:▸\ ,trail:· " use the same symbols as TextMate for tabstops and EOLs
" source the vimrc file after saving it
" if has("autocmd")
" 	autocmd bufwritepost .vimrc source $MYVIMRC
" endif

"""""
""""" mappings
" map R to redo and move its action to <C-r>
nnoremap R <C-r>
nnoremap <C-r> R
" map split window navigation to <leader> + arrow direction
nnoremap <leader><up> <C-w><up>
nnoremap <leader><right> <C-w><right>
nnoremap <leader><down> <C-w><down>
nnoremap <leader><left> <C-w><left>
" map split window resizing options
nnoremap <leader>+ <C-w>+
nnoremap <leader>- <C-w>-
nnoremap <leader>< <C-w><
nnoremap <leader>> <C-w>>
nnoremap <leader>= <C-w>=
" map exchange window with its neighbour
nnoremap <leader>x <C-w>x
" map changing split windows from vertical to horizontal and the reverse
nnoremap <leader>- <C-w>t <C-w>H
nnoremap <leader>_ <C-w>t <C-w>K
" navigate between tabs with Cmd+Opt+[left, right]
nnoremap <D-A-right> :tabnext<CR>
nnoremap <D-A-left> :tabprevious<CR>
" cycle tab position with Opt+[left, right]
nnoremap <silent><A-left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent><A-right> :execute 'silent! tabmove ' . tabpagenr()<CR>
" go back and forth on the jumplist
nnoremap g<left> <C-o>
nnoremap g<right> <C-i>
" show and hide invisibles (tabs, EOL)
nnoremap <leader>i :set list!<cr>
" toggle spell checking on and off with <leader>s and set region to en_gb
nnoremap <silent> <leader>s :set spell!<cr>:set spelllang=en_gb<cr>
" toggle search highlight with <leader>h
nnoremap <leader>h :set hlsearch!<cr>
" type NO to type normal mode commands in command mode
nnoremap <leader>n :execute "normal "<left>
" make ' behave like ` to prevent weird keyboard issues
nnoremap ' `
" remove without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d
nnoremap <leader>c "_c
nnoremap <leader>c "_c
vnoremap <leader>x "_x
vnoremap <leader>x "_x
" press <leader>p to paste from the clipboard, ignoring auto-indent
nnoremap <leader>p :put +<cr>
" with the cursor over a class name, press <leader>. to go to the class on the css/sass
nnoremap <leader>. :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cnext<cr>
" then press <leader>n to step through the quick-fix list results
nnoremap <leader>n :cn<cr>
" change the working directory of the current window to the one of the current file
nnoremap <leader>l :lcd %:p:h<cr>
" quickly edit .vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

"""""
""""" set plugin-specific options
" mattn/emmet-vim
" map emmet's trigger (you'll have to add ',' to the following combination)
let g:user_emmet_leader_key='<leader>'

" sophacles/vim-processing
" map Cmd + 0 to 'make', to run skectches ('redraw!' is a fix for terminal vim)
nnoremap <D-0> :silent make<cr>:redraw!<cr>

" tpope/vim-fugitive
" use <leader>gc to quicly prepare the file for commiting
nnoremap <leader>gc :Gwrite<cr>:Gcommit -m ""<left>

" marcelbeumer/dragvisuals.vim
vnoremap <expr>h DVB_Drag('left')
vnoremap <expr>l DVB_Drag('right')
vnoremap <expr>j DVB_Drag('down')
vnoremap <expr>k DVB_Drag('up')
vnoremap <expr>D DVB_Duplicate()

" Shougo/neosnippet.vim
" enable snipMate compatibility feature.
"let g:neosnippet#enable_snipmate_compatibility = 1
" tell neosnippet about the vim-snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
" SuperTab-like snippets behavior.
"imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
"\ "\<Plug>(neosnippet_expand_or_jump)"
"\: pumvisible() ? "\<C-n>" : "\<TAB>"
"smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
"\ "\<Plug>(neosnippet_expand_or_jump)"
"\: "\<TAB>"

" Shougo/vimfiler.vim
" make it the default file explorer
let g:vimfiler_as_default_explorer=1
" edit in new tabs by default
let g:vimfiler_edit_action='tabopen'

" Shougo/neocomplete
" enable at startup
let g:neocomplete#enable_at_startup=1
" set minimum syntax keyword length
let g:neocomplete#sources#syntax#min_keyword_length=3
" make <cr> do a carriage return normally
inoremap <silent><CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
	return neocomplete#smart_close_popup() . "\<CR>"
endfunction
" use <up> and <down> to select completions
inoremap <expr><down> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><up> pumvisible() ? "\<C-p>" : "\<TAB>"

" kien/ctrlp.vim
" bind :CtrlPCmdPalette to <c-a-p>
nnoremap <D-A-p> :CtrlPCmdPalette<cr>
