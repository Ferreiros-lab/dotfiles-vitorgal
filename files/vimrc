""""" bundles
call plug#begin('~/.vim/plugged')

" themes
"Plug 'altercation/vim-colors-solarized'
Plug 'w0ng/vim-hybrid'
Plug 'daylerees/colour-schemes', { 'rtp': 'vim/' }
" markdown syntax
Plug 'tpope/vim-markdown', { 'for': 'markdown' }
" jade syntax
Plug 'digitaltoad/vim-jade', { 'for': 'jade' }
" scss syntax
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
" less syntax
Plug 'groenewege/vim-less', { 'for': 'less' }
" html5 and inline svg omnicomplete funtion, indent and syntax
Plug 'othree/html5.vim', { 'for': 'html' }
" close html tags by typing '</'
Plug 'vim-scripts/closetag.vim', { 'for': 'html' }
" emmet
Plug 'mattn/emmet-vim', { 'for': ['html', 'css'] }
" css3 syntax
Plug 'hail2u/vim-css3-syntax', { 'for': 'css' }
" csscomb
Plug 'csscomb/csscomb-for-vim', { 'for': ['css', 'sass', 'scss'] }
" processing bundle
Plug 'sophacles/vim-processing', { 'for': 'processing' }
" toggle comments by typing 'gc'
Plug 'tpope/vim-commentary'
" surround text with pairs like (), for example by visually selecting and doing S}
Plug 'tpope/vim-surround'
" git wrapper
Plug 'tpope/vim-fugitive'
" interact with ack
Plug 'mileszs/ack.vim'
" move visual selections
Plug 'marcelbeumer/dragvisuals.vim'
" search in Dash app
Plug 'rizzatti/dash.vim'
" textmate-style snippets
Plug 'Shougo/neosnippet.vim'
" collection of snippets
Plug 'honza/vim-snippets'
" visually select text and press '*' and '#' to search for it
"Plug 'nelstrom/vim-visual-star-search'
" auto-close pairs like () and []
Plug 'Raimondi/delimitMate'
" multiple cursors
"Plug 'terryma/vim-multiple-cursors'
" file explorer (use <space> to mark files, and 'a' to act on them)
"Plug 'Shougo/vimfiler.vim'
" automatically open popup menu for completions
Plug 'Shougo/neocomplete.vim'
" syntax checker
"Plug 'scrooloose/syntastic'
" extend motions (eg <leader><leader>w)
Plug 'Lokaltog/vim-easymotion'
" interactive command execution in vim
"Plug 'Shougo/vimproc', { 'build' : { 'mac' : 'make -f make_mac.mak', }, }
" shell implemented by vim (requires vimproc)
"Plug 'Shougo/vimshell.vim'
" better handling of annoyances around swapfiles
Plug 'vitorgalvao/autoswap_mac'
" fuzzy file, buffer, mru, tag, etc finder
Plug 'kien/ctrlp.vim'
" command palette similar to the one in Sublime Text (requires ctrlp)
Plug 'fisadev/vim-ctrlp-cmdpalette'

call plug#end()

"""""
""""" general options
set backspace=indent,eol,start " fixes backspace behaviour
filetype plugin indent on " respects commands and indents from plugins and filetypes
set nocompatible " stops from behaving in a vi compatible way
syntax enable " color code syntax
" colorscheme
if has ('gui_running')
  colorscheme peacock
else
  colorscheme hybrid
  "colorscheme solarized
endif
set guioptions-=T " remove toolbar on GUI
set guioptions-=r " remove right-hand scroll bar on GUI
set guifont=Source\ Code\ Pro:h12 " font on GUI (macvim)
set background=dark " background
set cursorline " highlights the line the cursor is in
set relativenumber " line numbers relative to the current line
set ruler " show the line number on the bar
set list " show invisibles by default
set showcmd " show exta information on the bar, like the number of selected lines
set wildmenu " show completions in command mode
set wildmode=list:longest,full " in command mode, press tab once to show alternatives, and again to cycle
set autoread " watch for file changes
set autoindent " auto-indent code
set scrolloff=5 " allows show at least 5 extra lines before/after the cursor
set tabstop=2 " how many columns (spaces) a tab counts for
set softtabstop=2 " how many columns (spaces) a tab will convert to
set shiftwidth=2 " how many columns (spaces) text is reindented
set expandtab " convert tabs to spaces
set incsearch " highlights search matches as they are typed
"set nofoldenable " disables code folding
set listchars=tab:▸\ ,trail:· " use the same symbols as TextMate for tabstops and EOLs
" source the vimrc file after saving it
" if has("autocmd")
" 	autocmd bufwritepost .vimrc source $MYVIMRC
" endif

"""""
""""" mappings
" map R to redo and move its action to <C-r>
nnoremap R <C-r>
nnoremap <C-r> R
" map split window navigation to <leader> + arrow direction
nnoremap <leader><up> <C-w><up>
nnoremap <leader><right> <C-w><right>
nnoremap <leader><down> <C-w><down>
nnoremap <leader><left> <C-w><left>
" map split window resizing options
nnoremap <leader>+ <C-w>+
nnoremap <leader>- <C-w>-
nnoremap <leader>< <C-w><
nnoremap <leader>> <C-w>>
nnoremap <leader>= <C-w>=
" map exchange window with its neighbour
nnoremap <leader>x <C-w>x
" map changing split windows from vertical to horizontal and the reverse
nnoremap <leader>- <C-w>t <C-w>H
nnoremap <leader>_ <C-w>t <C-w>K
" navigate between tabs with Cmd+Opt+[left, right]
nnoremap <D-A-right> :tabnext<CR>
nnoremap <D-A-left> :tabprevious<CR>
" cycle tab position with Opt+[left, right]
nnoremap <silent><A-left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent><A-right> :execute 'silent! tabmove ' . tabpagenr()<CR>
" go back and forth on the jumplist
nnoremap g<left> <C-o>
nnoremap g<right> <C-i>
" show and hide invisibles (tabs, EOL)
nnoremap <leader>i :set list!<cr>
" toggle spell checking on and off with <leader>s and set region to en_gb
nnoremap <silent> <leader>s :set spell!<cr>:set spelllang=en_gb<cr>
" toggle search highlight with <leader>h
nnoremap <leader>h :set hlsearch!<cr>
" type NO to type normal mode commands in command mode
nnoremap <leader>n :execute "normal "<left>
" make ' behave like ` to prevent weird keyboard issues
nnoremap ' `
" remove without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d
nnoremap <leader>c "_c
nnoremap <leader>c "_c
vnoremap <leader>x "_x
vnoremap <leader>x "_x
" press <leader>p to paste from the clipboard, ignoring auto-indent
nnoremap <leader>p :put +<cr>
" with the cursor over a class name, press <leader>. to go to the class on the css/sass
nnoremap <leader>. :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cnext<cr>
" then press <leader>n to step through the quick-fix list results
nnoremap <leader>n :cn<cr>
" change the working directory of the current window to the one of the current file
nnoremap <leader>l :lcd %:p:h<cr>
" quickly edit .vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

"""""
""""" set plugin-specific options
" mattn/emmet-vim
" map emmet's trigger (you'll have to add ',' to the following combination)
let g:user_emmet_leader_key='<leader>'

" sophacles/vim-processing
" map Cmd + 0 to 'make', to run skectches ('redraw!' is a fix for terminal vim)
nnoremap <D-0> :silent make<cr>:redraw!<cr>

" tpope/vim-fugitive
" use <leader>gc to quicly prepare the file for commiting
nnoremap <leader>gc :Gwrite<cr>:Gcommit -m ""<left>

" marcelbeumer/dragvisuals.vim
vnoremap <expr>h DVB_Drag('left')
vnoremap <expr>l DVB_Drag('right')
vnoremap <expr>j DVB_Drag('down')
vnoremap <expr>k DVB_Drag('up')
vnoremap <expr>D DVB_Duplicate()

" Shougo/neosnippet.vim
" enable snipMate compatibility feature.
"let g:neosnippet#enable_snipmate_compatibility = 1
" tell neosnippet about the vim-snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
" SuperTab-like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" Raimondi/delimitMate
" place cursor where expected after pressing <space> or <cr>
let g:delimitMate_expand_cr=1
let g:delimitMate_expand_space=1

" Shougo/vimfiler.vim
" make it the default file explorer
let g:vimfiler_as_default_explorer=1
" edit in new tabs by default
let g:vimfiler_edit_action='tabopen'

" Shougo/neocomplete
" enable at startup
let g:neocomplete#enable_at_startup=1
" set minimum syntax keyword length
let g:neocomplete#sources#syntax#min_keyword_length=3
" use <up> and <down> to select completions
inoremap <expr><down> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><up> pumvisible() ? "\<C-p>" : "\<TAB>"
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" kien/ctrlp.vim
" set default keyboard to <c-o>
let g:ctrlp_map='<c-o>'

" fisadev/vim-ctrlp-cmdpalette
" bind :CtrlPCmdPalette to <c-s-p>
nnoremap <c-s-p> :CtrlPCmdPalette<cr>
